(letrec ((num-list? (lambda (ls)
                      (if (null? ls)
                          #t
                          (if (fixnum? (car ls))
                              (num-list? (cdr ls))
                              #f))))
         (length (lambda (ls)
                   (if (null? ls) 0 (+ (length (cdr ls)) 1))))
         (dot-prod (lambda (ls1 ls2)
                     (if (if (null? ls1) (null? ls2) #f)
                         0
                         (+ (* (car ls1) (car ls2))
                            (dot-prod (cdr ls1) (cdr ls2)))))))
  (let ((ls1 (quote (1 2 3 4 5))) (ls2 (quote (5 4 3 2 1))))
    (if (if (if (eq? (num-list? ls1) #f) #f #t)
            (if (if (eq? (num-list? ls2) #f) #f #t)
                (= (length ls1) (length ls2))
                #f)
            #f)
        (dot-prod ls1 ls2)
        #f)))
